import logging
import openai
import os
import warnings
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# üîá T·∫Øt c·∫£nh b√°o c·ª• th·ªÉ t·ª´ PTB
warnings.filterwarnings("ignore", category=UserWarning, module="telegram.ext._application")

# üîí X√°c th·ª±c file .env
try:
    if not load_dotenv("bot.env"):
        raise ValueError("‚ùå Kh√¥ng t√¨m th·∫•y file .env")

    REQUIRED_ENV_VARS = ["TELEGRAM_BOT_TOKEN", "OPENAI_API_KEY"]
    missing_vars = [var for var in REQUIRED_ENV_VARS if not os.getenv(var)]
    if missing_vars:
        raise ValueError(f"‚ö†Ô∏è Thi·∫øu bi·∫øn: {', '.join(missing_vars)}")

except Exception as e:
    logging.error(str(e))
    exit(1)

# Kh·ªüi t·∫°o bot
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# C·∫•u h√¨nh logging n√¢ng cao
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.WARNING,
    handlers=[
        logging.FileHandler("bot_debug.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Tr·∫°ng th√°i h·ªôi tho·∫°i
ASK_AI = 1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /start v·ªõi menu inline"""
    keyboard = [
        [InlineKeyboardButton("üí¨ Chat v·ªõi AI", callback_data="ask_ai")],
        [InlineKeyboardButton("üõ† Tr·ª£ gi√∫p", callback_data="help")]
    ]
    await update.message.reply_text(
        "ü§ñ Ch√†o m·ª´ng! H√£y ch·ªçn ch·ª©c nƒÉng:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def initiate_ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """B·∫Øt ƒë·∫ßu h·ªôi tho·∫°i AI"""
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("üìù Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:")
    return ASK_AI

async def process_ai_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω c√¢u h·ªèi AI v·ªõi ki·ªÉm tra b·∫£o m·∫≠t"""
    user_input = update.message.text.strip()

    # üîí Ki·ªÉm tra ƒë·∫ßu v√†o nghi√™m ng·∫∑t
    if not user_input or len(user_input) > 500:
        error_msg = "‚ö†Ô∏è C√¢u h·ªèi kh√¥ng h·ª£p l·ªá!" if not user_input else "‚ö†Ô∏è C√¢u h·ªèi qu√° d√†i (t·ªëi ƒëa 500 k√Ω t·ª±)"
        await update.message.reply_text(error_msg)
        return ASK_AI

    # üõ° L·ªçc n·ªôi dung nh·∫°y c·∫£m
    SENSITIVE_KEYWORDS = ["m·∫≠t kh·∫©u", "th·∫ª t√≠n d·ª•ng", "cvv", "ri√™ng t∆∞"]
    if any(kw in user_input.lower() for kw in SENSITIVE_KEYWORDS):
        await update.message.reply_text("‚õî N·ªôi dung kh√¥ng ƒë∆∞·ª£c ph√©p")
        return ConversationHandler.END

    try:
        # üß† G·ªçi OpenAI API v·ªõi timeout
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo-1106",
            messages=[{"role": "user", "content": user_input}],
            max_tokens=500,
            timeout=15  # Gi·ªõi h·∫°n th·ªùi gian ph·∫£n h·ªìi
        )
        ai_response = response.choices[0].message.content

        # üîé L·ªçc th√¥ng tin nh·∫°y c·∫£m trong ph·∫£n h·ªìi
        filtered_response = (
            ai_response.replace("API key", "[REDACTED]")
                      .replace("password", "[REDACTED]")
                      .replace("secret", "[REDACTED]")
        )
        await update.message.reply_text(f"ü§ñ {filtered_response}")

    except openai.error.RateLimitError:
        await update.message.reply_text("‚ö†Ô∏è H·ªá th·ªëng ƒëang qu√° t·∫£i, vui l√≤ng th·ª≠ l·∫°i sau 1 ph√∫t")
    except Exception as e:
        logger.error(f"L·ªói API: {str(e)}", exc_info=True)
        await update.message.reply_text("üîß ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng")

    return ConversationHandler.END

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """H·ªßy b·ªè h·ªôi tho·∫°i hi·ªán t·∫°i"""
    await update.message.reply_text("‚ùå ƒê√£ h·ªßy t∆∞∆°ng t√°c hi·ªán t·∫°i")
    return ConversationHandler.END

def setup_handlers(application: Application):
    """C·∫•u h√¨nh t·∫•t c·∫£ handlers"""
    # Conversation Handler cho AI
    ai_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(initiate_ai_chat, pattern="^ask_ai$")],
        states={
            ASK_AI: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_ai_question),
                CommandHandler("cancel", cancel_conversation)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
        per_chat=True,
        per_user=True
    )

    # ƒêƒÉng k√Ω c√°c handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(ai_conv_handler)

def main():
    """ƒêi·ªÉm kh·ªüi ch·∫°y ch√≠nh"""
    application = Application.builder().token(BOT_TOKEN).build()

    # C·∫•u h√¨nh logging cho th∆∞ vi·ªán
    logging.getLogger("httpx").setLevel(logging.CRITICAL)
    logging.getLogger("telegram").setLevel(logging.WARNING)

    setup_handlers(application)
    application.run_polling()

if __name__ == "__main__":
    main()